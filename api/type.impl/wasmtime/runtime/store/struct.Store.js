(function() {var type_impls = {
"wasmtime_c_api":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsContext-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store/context.rs.html#123\">source</a><a href=\"#impl-AsContext-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContext.html\" title=\"trait wasmtime::runtime::store::context::AsContext\">AsContext</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Data\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Data\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"wasmtime/runtime/store/context/trait.AsContext.html#associatedtype.Data\" class=\"associatedtype\">Data</a> = T</h4></section></summary><div class='docblock'>The host information associated with the <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>, aka the <code>T</code> in\n<a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store&lt;T&gt;</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store/context.rs.html#127\">source</a><a href=\"#method.as_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"wasmtime/runtime/store/context/trait.AsContext.html#tymethod.as_context\" class=\"fn\">as_context</a>(&amp;self) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/store/context/struct.StoreContext.html\" title=\"struct wasmtime::runtime::store::context::StoreContext\">StoreContext</a>&lt;'_, T&gt;</h4></section></summary><div class='docblock'>Returns the store context that this type provides access to.</div></details></div></details>","AsContext","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsContextMut-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store/context.rs.html#132\">source</a><a href=\"#impl-AsContextMut-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContextMut.html\" title=\"trait wasmtime::runtime::store::context::AsContextMut\">AsContextMut</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_context_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store/context.rs.html#134\">source</a><a href=\"#method.as_context_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"wasmtime/runtime/store/context/trait.AsContextMut.html#tymethod.as_context_mut\" class=\"fn\">as_context_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/store/context/struct.StoreContextMut.html\" title=\"struct wasmtime::runtime::store::context::StoreContextMut\">StoreContextMut</a>&lt;'_, T&gt;</h4></section></summary><div class='docblock'>Returns the store context that this type provides access to.</div></details></div></details>","AsContextMut","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2607\">source</a><a href=\"#impl-Debug-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2608\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2601\">source</a><a href=\"#impl-Default-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2602\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2617\">source</a><a href=\"#impl-Drop-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#2618\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#468\">source</a><a href=\"#impl-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#478\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.new\" class=\"fn\">new</a>(engine: &amp;<a class=\"struct\" href=\"wasmtime/engine/struct.Engine.html\" title=\"struct wasmtime::engine::Engine\">Engine</a>, data: T) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> to be associated with the given <a href=\"wasmtime/engine/struct.Engine.html\" title=\"struct wasmtime::engine::Engine\"><code>Engine</code></a> and\n<code>data</code> provided.</p>\n<p>The created <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> will place no additional limits on the size of\nlinear memories or tables at runtime. Linear memories and tables will\nbe allowed to grow to any upper limit specified in their definitions.\nThe store will limit the number of instances, linear memories, and\ntables created to 10,000. This can be overridden with the\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.limiter\" title=\"method wasmtime::runtime::store::Store::limiter\"><code>Store::limiter</code></a> configuration method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#576\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.data\" class=\"fn\">data</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Access the underlying data owned by this <code>Store</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#582\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.data_mut\" class=\"fn\">data_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Access the underlying data owned by this <code>Store</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_data\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#587\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.into_data\" class=\"fn\">into_data</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Consumes this <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>, destroying it, and returns the underlying data.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limiter\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#670-673\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.limiter\" class=\"fn\">limiter</a>(\n    &amp;mut self,\n    limiter: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut dyn <a class=\"trait\" href=\"wasmtime/runtime/limits/trait.ResourceLimiter.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiter\">ResourceLimiter</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static\n)</h4></section></summary><div class=\"docblock\"><p>Configures the <a href=\"wasmtime/runtime/limits/trait.ResourceLimiter.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiter\"><code>ResourceLimiter</code></a> used to limit resource creation\nwithin this <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>.</p>\n<p>Whenever resources such as linear memory, tables, or instances are\nallocated the <code>limiter</code> specified here is invoked with the store’s data\n<code>T</code> and the returned <a href=\"wasmtime/runtime/limits/trait.ResourceLimiter.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiter\"><code>ResourceLimiter</code></a> is used to limit the operation\nbeing allocated. The returned <a href=\"wasmtime/runtime/limits/trait.ResourceLimiter.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiter\"><code>ResourceLimiter</code></a> is intended to live\nwithin the <code>T</code> itself, for example by storing a\n<a href=\"wasmtime/runtime/limits/struct.StoreLimits.html\" title=\"struct wasmtime::runtime::limits::StoreLimits\"><code>StoreLimits</code></a>.</p>\n<p>Note that this limiter is only used to limit the creation/growth of\nresources in the future, this does not retroactively attempt to apply\nlimits to the <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>wasmtime::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">struct </span>MyApplicationState {\n    my_state: u32,\n    limits: StoreLimits,\n}\n\n<span class=\"kw\">let </span>engine = Engine::default();\n<span class=\"kw\">let </span>my_state = MyApplicationState {\n    my_state: <span class=\"number\">42</span>,\n    limits: StoreLimitsBuilder::new()\n        .memory_size(<span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">20 </span><span class=\"comment\">/* 1 MB */</span>)\n        .instances(<span class=\"number\">2</span>)\n        .build(),\n};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>store = Store::new(<span class=\"kw-2\">&amp;</span>engine, my_state);\nstore.limiter(|state| <span class=\"kw-2\">&amp;mut </span>state.limits);\n\n<span class=\"comment\">// Creation of smaller memories is allowed\n</span>Memory::new(<span class=\"kw-2\">&amp;mut </span>store, MemoryType::new(<span class=\"number\">1</span>, <span class=\"prelude-val\">None</span>)).unwrap();\n\n<span class=\"comment\">// Creation of a larger memory, however, will exceed the 1MB limit we've\n// configured\n</span><span class=\"macro\">assert!</span>(Memory::new(<span class=\"kw-2\">&amp;mut </span>store, MemoryType::new(<span class=\"number\">1000</span>, <span class=\"prelude-val\">None</span>)).is_err());\n\n<span class=\"comment\">// The number of instances in this store is limited to 2, so the third\n// instance here should fail.\n</span><span class=\"kw\">let </span>module = Module::new(<span class=\"kw-2\">&amp;</span>engine, <span class=\"string\">\"(module)\"</span>).unwrap();\n<span class=\"macro\">assert!</span>(Instance::new(<span class=\"kw-2\">&amp;mut </span>store, <span class=\"kw-2\">&amp;</span>module, <span class=\"kw-2\">&amp;</span>[]).is_ok());\n<span class=\"macro\">assert!</span>(Instance::new(<span class=\"kw-2\">&amp;mut </span>store, <span class=\"kw-2\">&amp;</span>module, <span class=\"kw-2\">&amp;</span>[]).is_ok());\n<span class=\"macro\">assert!</span>(Instance::new(<span class=\"kw-2\">&amp;mut </span>store, <span class=\"kw-2\">&amp;</span>module, <span class=\"kw-2\">&amp;</span>[]).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limiter_async\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#714-720\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.limiter_async\" class=\"fn\">limiter_async</a>(\n    &amp;mut self,\n    limiter: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut dyn <a class=\"trait\" href=\"wasmtime/runtime/limits/trait.ResourceLimiterAsync.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiterAsync\">ResourceLimiterAsync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static\n)</h4></section></summary><div class=\"docblock\"><p>Configures the <a href=\"wasmtime/runtime/limits/trait.ResourceLimiterAsync.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiterAsync\"><code>ResourceLimiterAsync</code></a>\nused to limit resource creation within this <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>.</p>\n<p>This method is an asynchronous variant of the <a href=\"wasmtime/runtime/store/struct.Store.html#method.limiter\" title=\"method wasmtime::runtime::store::Store::limiter\"><code>Store::limiter</code></a> method\nwhere the embedder can block the wasm request for more resources with\nhost <code>async</code> execution of futures.</p>\n<p>By using a <a href=\"wasmtime/runtime/limits/trait.ResourceLimiterAsync.html\" title=\"trait wasmtime::runtime::limits::ResourceLimiterAsync\"><code>ResourceLimiterAsync</code></a>\nwith a <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>, you can no longer use\n<a href=\"wasmtime/runtime/memory/struct.Memory.html#method.new\" title=\"associated function wasmtime::runtime::memory::Memory::new\"><code>Memory::new</code></a>,\n<a href=\"wasmtime/runtime/memory/struct.Memory.html#method.grow\" title=\"method wasmtime::runtime::memory::Memory::grow\"><code>Memory::grow</code></a>,\n<a href=\"wasmtime/runtime/externals/table/struct.Table.html#method.new\" title=\"associated function wasmtime::runtime::externals::table::Table::new\"><code>Table::new</code></a>, and\n<a href=\"wasmtime/runtime/externals/table/struct.Table.html#method.grow\" title=\"method wasmtime::runtime::externals::table::Table::grow\"><code>Table::grow</code></a>. Instead, you must use their\n<code>async</code> variants: <a href=\"wasmtime/runtime/memory/struct.Memory.html#method.new_async\" title=\"associated function wasmtime::runtime::memory::Memory::new_async\"><code>Memory::new_async</code></a>,\n<a href=\"wasmtime/runtime/memory/struct.Memory.html#method.grow_async\" title=\"method wasmtime::runtime::memory::Memory::grow_async\"><code>Memory::grow_async</code></a>,\n<a href=\"wasmtime/runtime/externals/table/struct.Table.html#method.new_async\" title=\"associated function wasmtime::runtime::externals::table::Table::new_async\"><code>Table::new_async</code></a>, and\n<a href=\"wasmtime/runtime/externals/table/struct.Table.html#method.grow_async\" title=\"method wasmtime::runtime::externals::table::Table::grow_async\"><code>Table::grow_async</code></a>.</p>\n<p>Note that this limiter is only used to limit the creation/growth of\nresources in the future, this does not retroactively attempt to apply\nlimits to the <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>. Additionally this must be used with an async\n<a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> configured via\n<a href=\"wasmtime/config/struct.Config.html#method.async_support\" title=\"method wasmtime::config::Config::async_support\"><code>Config::async_support</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_hook_async\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#754\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.call_hook_async\" class=\"fn\">call_hook_async</a>(\n    &amp;mut self,\n    hook: impl <a class=\"trait\" href=\"wasmtime/runtime/store/trait.CallHookHandler.html\" title=\"trait wasmtime::runtime::store::CallHookHandler\">CallHookHandler</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static\n)</h4></section></summary><div class=\"docblock\"><p>Configures an async function that runs on calls and returns between\nWebAssembly and host code. For the non-async equivalent of this method,\nsee <a href=\"wasmtime/runtime/store/struct.Store.html#method.call_hook\" title=\"method wasmtime::runtime::store::Store::call_hook\"><code>Store::call_hook</code></a>.</p>\n<p>The function is passed a <a href=\"wasmtime/runtime/store/enum.CallHook.html\" title=\"enum wasmtime::runtime::store::CallHook\"><code>CallHook</code></a> argument, which indicates which\nstate transition the VM is making.</p>\n<p>This function’s future may return a <a href=\"wasmtime_environ/trap_encoding/enum.Trap.html\" title=\"enum wasmtime_environ::trap_encoding::Trap\"><code>Trap</code></a>. If a trap is returned\nwhen an import was called, it is immediately raised as-if the host\nimport had returned the trap. If a trap is returned after wasm returns\nto the host then the wasm function’s result is ignored and this trap is\nreturned instead.</p>\n<p>After this function returns a trap, it may be called for subsequent\nreturns to host or wasm code as the trap propagates to the root call.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_hook\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#772-775\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.call_hook\" class=\"fn\">call_hook</a>(\n    &amp;mut self,\n    hook: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"enum\" href=\"wasmtime/runtime/store/enum.CallHook.html\" title=\"enum wasmtime::runtime::store::CallHook\">CallHook</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static\n)</h4></section></summary><div class=\"docblock\"><p>Configure a function that runs on calls and returns between WebAssembly\nand host code.</p>\n<p>The function is passed a <a href=\"wasmtime/runtime/store/enum.CallHook.html\" title=\"enum wasmtime::runtime::store::CallHook\"><code>CallHook</code></a> argument, which indicates which\nstate transition the VM is making.</p>\n<p>This function may return a <a href=\"wasmtime_environ/trap_encoding/enum.Trap.html\" title=\"enum wasmtime_environ::trap_encoding::Trap\"><code>Trap</code></a>. If a trap is returned when an\nimport was called, it is immediately raised as-if the host import had\nreturned the trap. If a trap is returned after wasm returns to the host\nthen the wasm function’s result is ignored and this trap is returned\ninstead.</p>\n<p>After this function returns a trap, it may be called for subsequent returns\nto host or wasm code as the trap propagates to the root call.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.engine\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#780\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.engine\" class=\"fn\">engine</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"wasmtime/engine/struct.Engine.html\" title=\"struct wasmtime::engine::Engine\">Engine</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"wasmtime/engine/struct.Engine.html\" title=\"struct wasmtime::engine::Engine\"><code>Engine</code></a> that this store is associated with.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gc\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#792\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.gc\" class=\"fn\">gc</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Perform garbage collection.</p>\n<p>Note that it is not required to actively call this function. GC will\nautomatically happen according to various internal heuristics. This is\nprovided if fine-grained control over the GC is desired.</p>\n<p>This method is only available when the <code>gc</code> Cargo feature is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gc_async\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#804-806\">source</a><h4 class=\"code-header\">pub async fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.gc_async\" class=\"fn\">gc_async</a>(&amp;mut self)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform garbage collection asynchronously.</p>\n<p>Note that it is not required to actively call this function. GC will\nautomatically happen according to various internal heuristics. This is\nprovided if fine-grained control over the GC is desired.</p>\n<p>This method is only available when the <code>gc</code> Cargo feature is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_fuel\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#818\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.get_fuel\" class=\"fn\">get_fuel</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the amount fuel in this <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a>. When fuel is enabled, it must\nbe configured via <a href=\"wasmtime/runtime/store/struct.Store.html#method.set_fuel\" title=\"method wasmtime::runtime::store::Store::set_fuel\"><code>Store::set_fuel</code></a>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if fuel consumption is not enabled\nvia <a href=\"wasmtime/config/struct.Config.html#method.consume_fuel\" title=\"method wasmtime::config::Config::consume_fuel\"><code>Config::consume_fuel</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_fuel\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#841\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.set_fuel\" class=\"fn\">set_fuel</a>(&amp;mut self, fuel: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Set the fuel to this <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> for wasm to consume while executing.</p>\n<p>For this method to work fuel consumption must be enabled via\n<a href=\"wasmtime/config/struct.Config.html#method.consume_fuel\" title=\"method wasmtime::config::Config::consume_fuel\"><code>Config::consume_fuel</code></a>. By default a\n<a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> starts with 0 fuel for wasm to execute with (meaning it will\nimmediately trap). This function must be called for the store to have\nsome fuel to allow WebAssembly to execute.</p>\n<p>Most WebAssembly instructions consume 1 unit of fuel. Some\ninstructions, such as <code>nop</code>, <code>drop</code>, <code>block</code>, and <code>loop</code>, consume 0\nunits, as any execution cost associated with them involves other\ninstructions which do consume fuel.</p>\n<p>Note that when fuel is entirely consumed it will cause wasm to trap.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if fuel consumption is not enabled via\n<a href=\"wasmtime/config/struct.Config.html#method.consume_fuel\" title=\"method wasmtime::config::Config::consume_fuel\"><code>Config::consume_fuel</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fuel_async_yield_interval\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#873\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.fuel_async_yield_interval\" class=\"fn\">fuel_async_yield_interval</a>(\n    &amp;mut self,\n    interval: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configures a <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> to yield execution of async WebAssembly code\nperiodically.</p>\n<p>When a <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> is configured to consume fuel with\n<a href=\"wasmtime/config/struct.Config.html#method.consume_fuel\" title=\"method wasmtime::config::Config::consume_fuel\"><code>Config::consume_fuel</code></a> this method will\nconfigure WebAssembly to be suspended and control will be yielded back to the\ncaller every <code>interval</code> units of fuel consumed. This is only suitable with use of\na store associated with an <a href=\"wasmtime/config/struct.Config.html#method.async_support\" title=\"method wasmtime::config::Config::async_support\">async config</a> because\nonly then are futures used and yields are possible.</p>\n<p>The purpose of this behavior is to ensure that futures which represent\nexecution of WebAssembly do not execute too long inside their\n<code>Future::poll</code> method. This allows for some form of cooperative\nmultitasking where WebAssembly will voluntarily yield control\nperiodically (based on fuel consumption) back to the running thread.</p>\n<p>Note that futures returned by this crate will automatically flag\nthemselves to get re-polled if a yield happens. This means that\nWebAssembly will continue to execute, just after giving the host an\nopportunity to do something else.</p>\n<p>The <code>interval</code> parameter indicates how much fuel should be\nconsumed between yields of an async future. When fuel runs out wasm will trap.</p>\n<h5 id=\"error\"><a class=\"doc-anchor\" href=\"#error\">§</a>Error</h5>\n<p>This method will error if it is not called on a store associated with an <a href=\"wasmtime/config/struct.Config.html#method.async_support\" title=\"method wasmtime::config::Config::async_support\">async\nconfig</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_epoch_deadline\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#903\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.set_epoch_deadline\" class=\"fn\">set_epoch_deadline</a>(&amp;mut self, ticks_beyond_current: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the epoch deadline to a certain number of ticks in the future.</p>\n<p>When the Wasm guest code is compiled with epoch-interruption\ninstrumentation\n(<a href=\"wasmtime/config/struct.Config.html#method.epoch_interruption\" title=\"method wasmtime::config::Config::epoch_interruption\"><code>Config::epoch_interruption()</code></a>),\nand when the <code>Engine</code>’s epoch is incremented\n(<a href=\"wasmtime/engine/struct.Engine.html#method.increment_epoch\" title=\"method wasmtime::engine::Engine::increment_epoch\"><code>Engine::increment_epoch()</code></a>)\npast a deadline, execution can be configured to either trap or\nyield and then continue.</p>\n<p>This deadline is always set relative to the current epoch:\n<code>delta_beyond_current</code> ticks in the future. The deadline can\nbe set explicitly via this method, or refilled automatically\non a yield if configured via\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.epoch_deadline_async_yield_and_update\" title=\"method wasmtime::runtime::store::Store::epoch_deadline_async_yield_and_update\"><code>epoch_deadline_async_yield_and_update()</code></a>. After\nthis method is invoked, the deadline is reached when\n<a href=\"wasmtime/engine/struct.Engine.html#method.increment_epoch\" title=\"method wasmtime::engine::Engine::increment_epoch\"><code>Engine::increment_epoch()</code></a> has been invoked at least\n<code>ticks_beyond_current</code> times.</p>\n<p>By default a store will trap immediately with an epoch deadline of 0\n(which has always “elapsed”). This method is required to be configured\nfor stores with epochs enabled to some future epoch deadline.</p>\n<p>See documentation on\n<a href=\"wasmtime/config/struct.Config.html#method.epoch_interruption\" title=\"method wasmtime::config::Config::epoch_interruption\"><code>Config::epoch_interruption()</code></a>\nfor an introduction to epoch-based interruption.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.epoch_deadline_trap\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#933\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.epoch_deadline_trap\" class=\"fn\">epoch_deadline_trap</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Configures epoch-deadline expiration to trap.</p>\n<p>When epoch-interruption-instrumented code is executed on this\nstore and the epoch deadline is reached before completion,\nwith the store configured in this way, execution will\nterminate with a trap as soon as an epoch check in the\ninstrumented code is reached.</p>\n<p>This behavior is the default if the store is not otherwise\nconfigured via\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.epoch_deadline_trap\" title=\"method wasmtime::runtime::store::Store::epoch_deadline_trap\"><code>epoch_deadline_trap()</code></a>,\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.epoch_deadline_callback\" title=\"method wasmtime::runtime::store::Store::epoch_deadline_callback\"><code>epoch_deadline_callback()</code></a> or\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.epoch_deadline_async_yield_and_update\" title=\"method wasmtime::runtime::store::Store::epoch_deadline_async_yield_and_update\"><code>epoch_deadline_async_yield_and_update()</code></a>.</p>\n<p>This setting is intended to allow for coarse-grained\ninterruption, but not a deterministic deadline of a fixed,\nfinite interval. For deterministic interruption, see the\n“fuel” mechanism instead.</p>\n<p>Note that when this is used it’s required to call\n<a href=\"wasmtime/runtime/store/struct.Store.html#method.set_epoch_deadline\" title=\"method wasmtime::runtime::store::Store::set_epoch_deadline\"><code>Store::set_epoch_deadline</code></a> or otherwise wasm will always immediately\ntrap.</p>\n<p>See documentation on\n<a href=\"wasmtime/config/struct.Config.html#method.epoch_interruption\" title=\"method wasmtime::config::Config::epoch_interruption\"><code>Config::epoch_interruption()</code></a>\nfor an introduction to epoch-based interruption.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.epoch_deadline_callback\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#964-967\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.epoch_deadline_callback\" class=\"fn\">epoch_deadline_callback</a>(\n    &amp;mut self,\n    callback: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"wasmtime/runtime/store/context/struct.StoreContextMut.html\" title=\"struct wasmtime::runtime::store::context::StoreContextMut\">StoreContextMut</a>&lt;'_, T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"wasmtime/runtime/store/enum.UpdateDeadline.html\" title=\"enum wasmtime::runtime::store::UpdateDeadline\">UpdateDeadline</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static\n)</h4></section></summary><div class=\"docblock\"><p>Configures epoch-deadline expiration to invoke a custom callback\nfunction.</p>\n<p>When epoch-interruption-instrumented code is executed on this\nstore and the epoch deadline is reached before completion, the\nprovided callback function is invoked.</p>\n<p>This callback should either return an <a href=\"wasmtime/runtime/store/enum.UpdateDeadline.html\" title=\"enum wasmtime::runtime::store::UpdateDeadline\"><code>UpdateDeadline</code></a>, or\nreturn an error, which will terminate execution with a trap.</p>\n<p>The <a href=\"wasmtime/runtime/store/enum.UpdateDeadline.html\" title=\"enum wasmtime::runtime::store::UpdateDeadline\"><code>UpdateDeadline</code></a> is a positive number of ticks to\nadd to the epoch deadline, as well as indicating what\nto do after the callback returns. If the <a href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\"><code>Store</code></a> is\nconfigured with async support, then the callback may return\n<a href=\"wasmtime/runtime/store/enum.UpdateDeadline.html#variant.Yield\" title=\"variant wasmtime::runtime::store::UpdateDeadline::Yield\"><code>UpdateDeadline::Yield</code></a> to yield to the async executor before\nupdating the epoch deadline. Alternatively, the callback may\nreturn <a href=\"wasmtime/runtime/store/enum.UpdateDeadline.html#variant.Continue\" title=\"variant wasmtime::runtime::store::UpdateDeadline::Continue\"><code>UpdateDeadline::Continue</code></a> to update the epoch deadline\nimmediately.</p>\n<p>This setting is intended to allow for coarse-grained\ninterruption, but not a deterministic deadline of a fixed,\nfinite interval. For deterministic interruption, see the\n“fuel” mechanism instead.</p>\n<p>See documentation on\n<a href=\"wasmtime/config/struct.Config.html#method.epoch_interruption\" title=\"method wasmtime::config::Config::epoch_interruption\"><code>Config::epoch_interruption()</code></a>\nfor an introduction to epoch-based interruption.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.epoch_deadline_async_yield_and_update\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/store.rs.html#996\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/store/struct.Store.html#tymethod.epoch_deadline_async_yield_and_update\" class=\"fn\">epoch_deadline_async_yield_and_update</a>(&amp;mut self, delta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Configures epoch-deadline expiration to yield to the async\ncaller and the update the deadline.</p>\n<p>When epoch-interruption-instrumented code is executed on this\nstore and the epoch deadline is reached before completion,\nwith the store configured in this way, execution will yield\n(the future will return <code>Pending</code> but re-awake itself for\nlater execution) and, upon resuming, the store will be\nconfigured with an epoch deadline equal to the current epoch\nplus <code>delta</code> ticks.</p>\n<p>This setting is intended to allow for cooperative timeslicing\nof multiple CPU-bound Wasm guests in different stores, all\nexecuting under the control of an async executor. To drive\nthis, stores should be configured to “yield and update”\nautomatically with this function, and some external driver (a\nthread that wakes up periodically, or a timer\nsignal/interrupt) should call\n<a href=\"wasmtime/engine/struct.Engine.html#method.increment_epoch\" title=\"method wasmtime::engine::Engine::increment_epoch\"><code>Engine::increment_epoch()</code></a>.</p>\n<p>See documentation on\n<a href=\"wasmtime/config/struct.Config.html#method.epoch_interruption\" title=\"method wasmtime::config::Config::epoch_interruption\"><code>Config::epoch_interruption()</code></a>\nfor an introduction to epoch-based interruption.</p>\n</div></details></div></details>",0,"wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreExt-for-Store%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/unix.rs.html#27\">source</a><a href=\"#impl-StoreExt-for-Store%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"wasmtime/runtime/unix/trait.StoreExt.html\" title=\"trait wasmtime::runtime::unix::StoreExt\">StoreExt</a> for <a class=\"struct\" href=\"wasmtime/runtime/store/struct.Store.html\" title=\"struct wasmtime::runtime::store::Store\">Store</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_signal_handler\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/unix.rs.html#28-33\">source</a><a href=\"#method.set_signal_handler\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"wasmtime/runtime/unix/trait.StoreExt.html#tymethod.set_signal_handler\" class=\"fn\">set_signal_handler</a>&lt;H&gt;(&amp;mut self, handler: H)<div class=\"where\">where\n    H: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>siginfo_t, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class='docblock'>The signal handler must be\n<a href=\"http://man7.org/linux/man-pages/man7/signal-safety.7.html\">async-signal-safe</a>.</div></details></div></details>","StoreExt","wasmtime_c_api::store::WasmStore","wasmtime_c_api::store::WasmtimeStore"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()