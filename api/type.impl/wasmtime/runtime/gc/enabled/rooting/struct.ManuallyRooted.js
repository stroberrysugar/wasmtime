(function() {var type_impls = {
"wasmtime_c_api":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ManuallyRooted%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1203\">source</a><a href=\"#impl-Debug-for-ManuallyRooted%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"wasmtime/runtime/gc/trait.GcRef.html\" title=\"trait wasmtime::runtime::gc::GcRef\">GcRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1204\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","wasmtime_c_api::ref::wasmtime_anyref_t","wasmtime_c_api::ref::wasmtime_externref_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-ManuallyRooted%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1210\">source</a><a href=\"#impl-Deref-for-ManuallyRooted%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"wasmtime/runtime/gc/trait.GcRef.html\" title=\"trait wasmtime::runtime::gc::GcRef\">GcRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1213\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","wasmtime_c_api::ref::wasmtime_anyref_t","wasmtime_c_api::ref::wasmtime_externref_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ManuallyRooted%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1218-1220\">source</a><a href=\"#impl-ManuallyRooted%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"wasmtime/runtime/gc/trait.GcRef.html\" title=\"trait wasmtime::runtime::gc::GcRef\">GcRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1281\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self, store: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContextMut.html\" title=\"trait wasmtime::runtime::store::context::AsContextMut\">AsContextMut</a>) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Clone this <code>ManuallyRooted</code>.</p>\n<p>Does not consume or unroot <code>self</code>: both <code>self</code> and the new\n<code>ManuallyRooted</code> return value will need to be manually unrooted.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is not associated with the given <code>store</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>store = Store::&lt;Vec&lt;ManuallyRooted&lt;ExternRef&gt;&gt;&gt;::default();\n\n<span class=\"comment\">// Create our `ManuallyRooted` in a nested scope to avoid rooting it for\n// the duration of the store's lifetime.\n</span><span class=\"kw\">let </span>x = {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scope = RootScope::new(<span class=\"kw-2\">&amp;mut </span>store);\n    <span class=\"kw\">let </span>x = ExternRef::new(<span class=\"kw-2\">&amp;mut </span>scope, <span class=\"number\">1234</span>)<span class=\"question-mark\">?</span>;\n    x.to_manually_rooted(<span class=\"kw-2\">&amp;mut </span>scope)<span class=\"question-mark\">?\n</span>};\n\n<span class=\"comment\">// Push five clones of `x` into our store.\n</span><span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">5 </span>{\n    <span class=\"kw\">let </span>x_clone = x.clone(<span class=\"kw-2\">&amp;mut </span>store);\n    store.data_mut().push(x_clone);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unroot\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1300\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.unroot\" class=\"fn\">unroot</a>(self, store: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContextMut.html\" title=\"trait wasmtime::runtime::store::context::AsContextMut\">AsContextMut</a>)</h4></section></summary><div class=\"docblock\"><p>Unroot this GC object.</p>\n<p>Failure to call this method will result in the GC object, and anything\nit transitively references, being kept alive (aka “leaking”) for the\nentirety of the store’s lifetime.</p>\n<p>See the type-level docs for example usage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_rooted\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1362\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.to_rooted\" class=\"fn\">to_rooted</a>(&amp;self, context: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContextMut.html\" title=\"trait wasmtime::runtime::store::context::AsContextMut\">AsContextMut</a>) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.Rooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::Rooted\">Rooted</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Clone this <code>ManuallyRooted&lt;T&gt;</code> into a <code>Rooted&lt;T&gt;</code>.</p>\n<p>This operation does not consume or unroot this <code>ManuallyRooted&lt;T&gt;</code>.</p>\n<p>The underlying GC object is re-rooted in the given context’s scope. The\nresulting <code>Rooted&lt;T&gt;</code> is only valid during the given context’s\nscope. See the <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.Rooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::Rooted\"><code>Rooted&lt;T&gt;</code></a> documentation for more\ndetails on rooting scopes.</p>\n<p>This operation does not consume or unroot this <code>ManuallyRooted&lt;T&gt;</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if this object is not associated with the given context’s store.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>store = Store::&lt;()&gt;::default();\n\n<span class=\"kw\">let </span>root1: Rooted&lt;<span class=\"kw\">_</span>&gt;;\n\n<span class=\"kw\">let </span>manual = {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scope = RootScope::new(<span class=\"kw-2\">&amp;mut </span>store);\n    root1 = ExternRef::new(<span class=\"kw-2\">&amp;mut </span>scope, <span class=\"number\">1234</span>)<span class=\"question-mark\">?</span>;\n    root1.to_manually_rooted(<span class=\"kw-2\">&amp;mut </span>scope)<span class=\"question-mark\">?\n</span>};\n\n<span class=\"comment\">// `root1` is no longer accessible because it was unrooted when `scope`\n// was dropped.\n</span><span class=\"macro\">assert!</span>(root1.data(<span class=\"kw-2\">&amp;</span>store).is_err());\n\n<span class=\"comment\">// But we can re-root `manual` into this scope.\n</span><span class=\"kw\">let </span>root2 = manual.to_rooted(<span class=\"kw-2\">&amp;mut </span>store);\n<span class=\"macro\">assert!</span>(root2.data(<span class=\"kw-2\">&amp;</span>store).is_ok());\n\n<span class=\"comment\">// And we also still have access to `manual` and we still have to\n// manually unroot it.\n</span><span class=\"macro\">assert!</span>(manual.data(<span class=\"kw-2\">&amp;</span>store).is_ok());\nmanual.unroot(<span class=\"kw-2\">&amp;mut </span>store);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_rooted\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1417\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.into_rooted\" class=\"fn\">into_rooted</a>(self, context: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContextMut.html\" title=\"trait wasmtime::runtime::store::context::AsContextMut\">AsContextMut</a>) -&gt; <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.Rooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::Rooted\">Rooted</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert this <code>ManuallyRooted&lt;T&gt;</code> into a <code>Rooted&lt;T&gt;</code>.</p>\n<p>The underlying GC object is re-rooted in the given context’s scope. The\nresulting <code>Rooted&lt;T&gt;</code> is only valid during the given context’s\nscope. See the <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.Rooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::Rooted\"><code>Rooted&lt;T&gt;</code></a> documentation for more\ndetails on rooting scopes.</p>\n<p>This operation consumes and unroots this <code>ManuallyRooted&lt;T&gt;</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if this object is not associate with the given context’s store.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>store = Store::&lt;()&gt;::default();\n\n<span class=\"kw\">let </span>root1: Rooted&lt;<span class=\"kw\">_</span>&gt;;\n\n<span class=\"kw\">let </span>manual = {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scope = RootScope::new(<span class=\"kw-2\">&amp;mut </span>store);\n    root1 = ExternRef::new(<span class=\"kw-2\">&amp;mut </span>scope, <span class=\"number\">1234</span>)<span class=\"question-mark\">?</span>;\n    root1.to_manually_rooted(<span class=\"kw-2\">&amp;mut </span>scope)<span class=\"question-mark\">?\n</span>};\n\n<span class=\"comment\">// `root1` is no longer accessible because it was unrooted when `scope`\n// was dropped.\n</span><span class=\"macro\">assert!</span>(root1.data(<span class=\"kw-2\">&amp;</span>store).is_err());\n\n<span class=\"comment\">// But we can re-root `manual` into this scope.\n</span><span class=\"kw\">let </span>root2 = manual.into_rooted(<span class=\"kw-2\">&amp;mut </span>store);\n<span class=\"macro\">assert!</span>(root2.data(<span class=\"kw-2\">&amp;</span>store).is_ok());\n\n<span class=\"comment\">// `manual` was consumed by the `into_rooted` call, and we no longer\n// have access to it, nor need to manually unroot it.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1478-1482\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.ref_eq\" class=\"fn\">ref_eq</a>(\n    store: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContext.html\" title=\"trait wasmtime::runtime::store::context::AsContext\">AsContext</a>,\n    a: &amp;impl <a class=\"trait\" href=\"wasmtime/runtime/gc/trait.RootedGcRef.html\" title=\"trait wasmtime::runtime::gc::RootedGcRef\">RootedGcRef</a>&lt;T&gt;,\n    b: &amp;impl <a class=\"trait\" href=\"wasmtime/runtime/gc/trait.RootedGcRef.html\" title=\"trait wasmtime::runtime::gc::RootedGcRef\">RootedGcRef</a>&lt;T&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Are these two GC roots referencing the same underlying GC object?</p>\n<p>This function will return <code>true</code> even when <code>a</code> and <code>b</code> are different GC\nroots (for example because they were rooted in different scopes) if they\nare rooting the same underlying GC object.</p>\n<p>Because this method takes any <code>impl RootedGcRef&lt;T&gt;</code> arguments, it can be\nused to compare, for example, a <code>Rooted&lt;T&gt;</code> and a <code>ManuallyRooted&lt;T&gt;</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if either <code>a</code> or <code>b</code> is not associated with the given <code>store</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>store = Store::&lt;()&gt;::default();\n\n<span class=\"kw\">let </span>a = ExternRef::new_manually_rooted(<span class=\"kw-2\">&amp;mut </span>store, <span class=\"string\">\"hello\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>b = a.clone(<span class=\"kw-2\">&amp;mut </span>store);\n\n<span class=\"comment\">// `a` and `b` are rooting the same object.\n</span><span class=\"macro\">assert!</span>(ManuallyRooted::ref_eq(<span class=\"kw-2\">&amp;</span>store, <span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b)<span class=\"question-mark\">?</span>);\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scope = RootScope::new(<span class=\"kw-2\">&amp;mut </span>store);\n\n    <span class=\"comment\">// `c` is a different GC root, is in a different scope, and is a\n    // `Rooted&lt;T&gt;` instead of a `ManuallyRooted&lt;T&gt;`, but is still rooting\n    // the same object.\n    </span><span class=\"kw\">let </span>c = a.to_rooted(<span class=\"kw-2\">&amp;mut </span>scope);\n    <span class=\"macro\">assert!</span>(ManuallyRooted::ref_eq(<span class=\"kw-2\">&amp;</span>scope, <span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>c)<span class=\"question-mark\">?</span>);\n}\n\n<span class=\"kw\">let </span>x = ExternRef::new_manually_rooted(<span class=\"kw-2\">&amp;mut </span>store, <span class=\"string\">\"goodbye\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// `a` and `x` are rooting different objects.\n</span><span class=\"macro\">assert!</span>(!ManuallyRooted::ref_eq(<span class=\"kw-2\">&amp;</span>store, <span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>x)<span class=\"question-mark\">?</span>);\n\na.unroot(<span class=\"kw-2\">&amp;mut </span>store);\nb.unroot(<span class=\"kw-2\">&amp;mut </span>store);\nx.unroot(<span class=\"kw-2\">&amp;mut </span>store);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rooted_hash\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1493-1495\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.rooted_hash\" class=\"fn\">rooted_hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\"><p>Hash this root.</p>\n<p>Note that, similar to <code>Rooted::rooted_eq</code>, this only operates on the\nroot and <em>not</em> the underlying GC reference. That means that two\ndifferent rootings of the same object will hash to different values\n(modulo hash collisions). If this is undesirable, use the\n<a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#method.ref_hash\" title=\"method wasmtime::runtime::gc::enabled::rooting::ManuallyRooted::ref_hash\"><code>ref_hash</code></a> method instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_hash\" class=\"method\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/rooting.rs.html#1507-1509\">source</a><h4 class=\"code-header\">pub fn <a href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html#tymethod.ref_hash\" class=\"fn\">ref_hash</a>&lt;H&gt;(&amp;self, store: impl <a class=\"trait\" href=\"wasmtime/runtime/store/context/trait.AsContext.html\" title=\"trait wasmtime::runtime::store::context::AsContext\">AsContext</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\"><p>Hash the underlying rooted object reference.</p>\n<p>Note that, similar to <code>Rooted::ref_eq</code>, and operates on the underlying\nrooted GC object reference, not the root. That means that two\n<em>different</em> rootings of the same object will hash to the <em>same</em>\nvalue. If this is undesirable, use the\n<a href=\"wasmtime/runtime/gc/enabled/rooting/struct.Rooted.html#method.rooted_hash\" title=\"method wasmtime::runtime::gc::enabled::rooting::Rooted::rooted_hash\"><code>rooted_hash</code></a> method instead.</p>\n</div></details></div></details>",0,"wasmtime_c_api::ref::wasmtime_anyref_t","wasmtime_c_api::ref::wasmtime_externref_t"],["<section id=\"impl-WasmTy-for-ManuallyRooted%3CAnyRef%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/anyref.rs.html#355\">source</a><a href=\"#impl-WasmTy-for-ManuallyRooted%3CAnyRef%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"wasmtime/runtime/func/typed/trait.WasmTy.html\" title=\"trait wasmtime::runtime::func::typed::WasmTy\">WasmTy</a> for <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;<a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/anyref/struct.AnyRef.html\" title=\"struct wasmtime::runtime::gc::enabled::anyref::AnyRef\">AnyRef</a>&gt;</h3></section>","WasmTy","wasmtime_c_api::ref::wasmtime_anyref_t"],["<section id=\"impl-WasmTy-for-ManuallyRooted%3CExternRef%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/wasmtime/runtime/gc/enabled/externref.rs.html#527\">source</a><a href=\"#impl-WasmTy-for-ManuallyRooted%3CExternRef%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"wasmtime/runtime/func/typed/trait.WasmTy.html\" title=\"trait wasmtime::runtime::func::typed::WasmTy\">WasmTy</a> for <a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/rooting/struct.ManuallyRooted.html\" title=\"struct wasmtime::runtime::gc::enabled::rooting::ManuallyRooted\">ManuallyRooted</a>&lt;<a class=\"struct\" href=\"wasmtime/runtime/gc/enabled/externref/struct.ExternRef.html\" title=\"struct wasmtime::runtime::gc::enabled::externref::ExternRef\">ExternRef</a>&gt;</h3></section>","WasmTy","wasmtime_c_api::ref::wasmtime_externref_t"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()